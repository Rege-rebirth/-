编译型语言：需通过编译器（compiler）将源代码编译成机器码，之后才能执行的语言。一般需经过编译（compile）、链接（linker）这两个步骤。
    编译是把源代码编译成机器码，
    链接是把各个模块的机器码和依赖库串连起来生成可执行文件。

 优点：编译器一般会有预编译的过程对代码进行优化。因为编译只做一次，运行时不需要编译，所以编译型语言的程序执行效率高。可以脱离语言环境独立运行。
 缺点：编译之后如果需要修改就需要整个模块重新编译。编译的时候根据对应的运行环境生成机器码，不同的操作系统之间移植就会有问题，需要根据运行的操作系统环境    编译不同的可执行文件。
 代表语言：C、C++、Pascal、Object-C以及最近很火的苹果新语言swift；
 商业公司通常会采用这种语言，因为它执行效率很高，而且运行时不需要编译，从而可以脱离语言环境独立运行。

解释性语言：解释性语言在运行之前不需要编译，相比编译型语言省了道工序，在运行程序的时候才逐行翻译。
  优点：在安装了解释器（虚拟机）的平台上都能运行。灵活是它的优点，需要修改代码的时候直接修改就可以，可以快速部署，不用停机维护。
  缺点：每次运行的时候都要解释一遍，性能上不如编译型语言。
  代表语言：JavaScript、Python、Erlang、PHP、Perl、Ruby

动态语言：是一类在运行时可以改变其结构的语言：例如新的函数、对象、甚至代码可以被引进，已有的函数可以被删除或是其他结构上的变化。通俗点说就是在运行时代码    可以根据某些条件改变自身结构。
主要动态语言：Python、Object-C、C#、JavaScript、PHP、Erlang。

静态语言：与动态语言相对应的，运行时结构不可变的语言就是静态语言。如Java、C、C++。

有三个名词容易混淆：
Dynamic Programming Language (动态语言或动态编程语言)
Dynamically Typed Language (动态类型语言)
Statically Typed Language (静态类型语言)

动态类型语言和动态语言完全不是一个概念，千万不要弄混淆：
动态类型语言是指在运行期间才去做数据类型检查的语言，说的是数据类型；
动态类型语言的数据类型不是在编译阶段决定的，而是把类型绑定延后到了运行阶段。

而动态语言：说的是运行是改变结构，说的是代码结构。
主要语言：Python、Ruby、Erlang、JavaScript、swift、PHP、Perl。

静态类型语言：静态语言的数据类型是在编译期间（或运行之前）确定的，编写代码的时候要明确确定变量的数据类型。
主要语言：C、C++、C#、Java、Object-C。

强类型语言是指强制数据类型定义的语言。也就是说，一旦一个变量被指定了某个数据类型，如果不经过强制转换，那么它就永远是这个数据类型了。举个例子：如果你定义了一个整型变量a,那么程序根本不可能将a当作字符串类型处理。强类型定义语言是类型安全的语言。
弱类型语言则是指数据类型可以被忽略的语言。它与强类型定义语言相反, 一个变量可以赋不同数据类型的值。强类型定义语言在速度上可能略逊色于弱类型定义语言，但是强类型定义语言带来的严谨性能够有效的避免许多错误。
具体说就是，类型的转换是语言本身决定的（强），还是类型自己决定的（弱），譬如说，支持int和float的混合运算，C就是语言本身决定的，编译器看到你用int和float做加法，就根据规定把int转float，然后做float的加法，这是一种弱类型特性。
